<#@ template debug="True" hostspecific="True" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Text.RegularExpressions"  #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml.Linq" #> 
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>

<# 	if (GenerationEnvironment.Length > 0 && GenerationEnvironment.ToString().Trim().Length == 0)
		GenerationEnvironment.Length = 0; #>
using System.Configuration;

namespace InvoiceTracker
{
<# PushIndent("   ");#>
public static class ConnfigurationStrings
{<# PushIndent("   ");#>
	<# foreach (XElement c in ReadConfig())
       {
		   string cnName = c.Attribute(XName.Get("name")).Value;
		   string propName = CleanName(cnName);
		   #>

public static string <#= propName  #>
{      
	get { return ConfigurationManager.ConnectionStrings["<#=propName#>"].ConnectionString; }
}	<# PopIndent(); #>	
} <#} PopIndent(); #>

}





<#+ 
	private string CleanName(string name)
	{
		return name.Replace(" ", string.Empty);
	}

	private IEnumerable<XElement> ReadConfig()
	{
		string cfgPath = GetConfigFilePath();
		if (string.IsNullOrEmpty(cfgPath))
		{
			return new List<XElement>();
        }

		XDocument cfg = XDocument.Load(cfgPath);
		XElement cnElement = cfg.Root.Element(XName.Get("connectionStrings"));

		if(cnElement == null)
		{
			Error("connectionStrings node was not found in the configuration file");
			return new List<XElement>();
		}
		return cnElement.Elements();
	}

	private string GetConfigFilePath()
	{
		FileInfo fi = new FileInfo(Host.TemplateFile);
		string currentFolder = fi.Directory.FullName;

		string appConfig = Path.Combine(currentFolder, "App.config");
		string webConfig = Path.Combine(currentFolder, "Web.config");

		if(File.Exists(appConfig)) { return appConfig; }
		if(File.Exists(webConfig)) { return webConfig; }

		Error("Could not find a configuration file!");

		return string.Empty;
	}

#>
